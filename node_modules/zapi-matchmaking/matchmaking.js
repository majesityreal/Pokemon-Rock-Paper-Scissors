// matchmaking.js v1

// Load the global queue and our user data.
const globalQueue = {};

// Doesn't this explain itself?
let matchmakerEnabled = 0

// Rank checking values!
let doRankChecking = 0
let IDoNotKnowWhatToCallThis

// Make the server array for later...
let servers = [];

function startMatchMaker(serverArray, rmcheck, close_enough) {
  if (typeof serverArray === undefined || typeof rmcheck === undefined) {
    throw "002-0003"
  }
  servers = serverArray;
  matchmakerEnabled = 1
  doRankChecking = rmcheck
  IDoNotKnowWhatToCallThis = close_enough
  return "001"
}

function getServer() {
  // Grab the first server in the array
  let server = servers[0];
  // Slice it out and return it
  servers = servers.slice(1);
  return server;
}

// rank2 should be the user you found and are making a match with
function checkRank(rank1, rank2) {
  let rank2r1 = rank2 - IDoNotKnowWhatToCallThis;
  let rank2r2 = rank2 + IDoNotKnowWhatToCallThis;
  return rank1 >= rank2r1 && rank1 <= rank2r2;
}

function startMatch(UUID, rank) {
  return new Promise((resolve, reject) => {
      // Check if another UUID exists in the global queue
    if (doRankChecking === 0) {
      for (const uuid in globalQueue) {
        if (
          uuid !== UUID &&
          globalQueue[uuid].matchmade === 0
        ) {
          // Get server id using the getServer function
          const serverId = getServer();
          if (globalQueue[UUID]) {
            if (globalQueue[UUID].matchmade === 1) {
              resolve(globalQueue[UUID].serverId);
            }
          } else {
            // Update the current UUID and the found UUID (UUID2) in the global queue
            globalQueue[UUID] = {
              matchmade: 1,
              serverId: serverId,
            };
            globalQueue[uuid] = {
              matchmade: 1,
              serverId: serverId,
            };
            resolve(serverId);
            clearInterval(lmao);
          }
        }
      }

      // If no other UUID is found, add the current UUID to the global queue with empty matchmade and serverid
      globalQueue[UUID] = {
        matchmade: 0,
        serverId: null,
      };
      let time = 0;
      // Wait for 10 seconds

      var lmao = setInterval(() => {
        // Check every second if a UUID that isn't the current UUID entered the queue
        for (const uuid in globalQueue) {
          if (
            uuid !== UUID &&
            globalQueue[uuid].matchmade === 0 
          ) {
            // Get server id using the getServer function
            const serverId = getServer();
            if (globalQueue[UUID]) {
              if (globalQueue[UUID].matchmade === 1) {
                resolve(globalQueue[UUID].serverId);
              }
            } else {
              // Update the current UUID and the found UUID (UUID2) in the global queue
              globalQueue[UUID] = {
                matchmade: 1,
                serverId: serverId,
              };
              globalQueue[uuid] = {
                matchmade: 1,
                serverId: serverId,
              };
              resolve(serverId);
              clearInterval(lmao);
            }
          }
        }
        if (time >= 20) {
            reject("002-0001");
          clearInterval(lmao);
        } else {
          time++;
        }
      }, 1000);
    } else if (doRankChecking === 1) {
      // Check if another UUID exists in the global queue
      for (const uuid in globalQueue) {
        if (
          uuid !== UUID &&
          globalQueue[uuid].matchmade === 0 &&
          checkRank(rank, globalQueue[uuid].rank)
        ) {
          // Get server id using the getServer function
          const serverId = getServer();
          if (globalQueue[UUID]) {
            if (globalQueue[UUID].matchmade === 1) {
              resolve(globalQueue[UUID].serverId);
            }
          } else {
            // Update the current UUID and the found UUID (UUID2) in the global queue
            globalQueue[UUID] = {
              matchmade: 1,
              serverId: serverId,
            };
            globalQueue[uuid] = {
              matchmade: 1,
              serverId: serverId,
            };
            resolve(serverId);
            clearInterval(lmao);
          }
        }
      }

      // If no other UUID is found, add the current UUID to the global queue with empty matchmade and serverid
      globalQueue[UUID] = {
        matchmade: 0,
        serverId: null,
        rank: rank
      };
      let time = 0;
      // Wait for 10 seconds

      var lmao = setInterval(() => {
        // Check every second if a UUID that isn't the current UUID entered the queue
        for (const uuid in globalQueue) {
          if (
            uuid !== UUID &&
            globalQueue[uuid].matchmade === 0 &&
            checkRank(rank, globalQueue[uuid].rank)
          ) {
            // Get server id using the getServer function
            const serverId = getServer();
            if (globalQueue[UUID]) {
              if (globalQueue[UUID].matchmade === 1) {
                resolve(globalQueue[UUID].serverId);
              }
            } else {
              // Update the current UUID and the found UUID (UUID2) in the global queue
              globalQueue[UUID] = {
                matchmade: 1,
                serverId: serverId,
              };
              globalQueue[uuid] = {
                matchmade: 1,
                serverId: serverId,
              };
              resolve(serverId);
              clearInterval(lmao);
            }
          }
        }
        if (time >= 60) {
            reject("002-0001");
          clearInterval(lmao);
        } else {
          time++;
        }
      }, 1000);
    }
  });
}

module.exports = {
  getServer,
  startMatch,
  startMatchMaker,
};
